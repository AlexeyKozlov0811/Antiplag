name: CI-CD-Pileline-aws

env:
  S3_BUCKET_NAME: "oleksii-kozlov-antiplag-bucket"
  DEPLOY_PACKAGE_NAME: "antiplag_${{ github.sha }}.zip"
  AWS_REGION_NAME: "eu-central-1"
  ECR_REPOSITORY: "antiplag"
  EB_APPLICATION_NAME: "Antiplag"
  EB_ENVIRONMENT: "Antiplag-env"

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4.0.0
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with pytest
        run: |
          pip install pytest
          pip install coverage
          coverage run antiplag/manage.py test --settings=Antiplag.settings
          coverage report -m
          coverage xml -o coverage-report-${{ github.sha }}.xml
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage-report-${{ github.sha }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Create ZIP package
        run: zip -r ${{env.DEPLOY_PACKAGE_NAME}} ./ -x *.git*

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}
          
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags

      - name: Copy deployment package to S3
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME }}/
        
  cd:
    runs-on: ubuntu-latest
    needs: [ci]

    steps:
      - name: Clone repo
        uses: actions/checkout@v3
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}
          
      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./build/git_update.sh -v minor

      - name: Create new EB app version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "${{ steps.increment-git-tag.outputs.git-tag }}" \
          --description "CommitSHA-${{ github.sha }}"
      - name: Deploy new EB app version
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT }} --version-label "${{ steps.increment-git-tag.outputs.git-tag }}"
